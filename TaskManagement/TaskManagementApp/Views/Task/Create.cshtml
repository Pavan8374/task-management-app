@using TaskManagement.Application.DTOs.Tasks
<!-- Views/Task/Create.cshtml -->
@model CreateTaskRequest
@{
    ViewData["Title"] = "Create New Task";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid">
    <div class="row">
        <div class="col-lg-8 offset-lg-2">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="fas fa-plus-circle me-2"></i>Create New Task
                    </h2>
                    <p class="text-muted mb-0">Fill in the details below to create a new task</p>
                </div>
                <a href="@Url.Action("Dashboard", "Task")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                </a>
            </div>

            <!-- Create Task Form -->
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>Task Details
                    </h5>
                </div>
                <div class="card-body">
                    <form id="createTaskForm" method="POST" action="@Url.Action("Create", "Task")">
                        @Html.AntiForgeryToken()
                        
                        <div class="row">
                            <!-- Title -->
                            <div class="col-md-12 mb-3">
                                <label for="Title" class="form-label">
                                    Task Title <span class="text-danger">*</span>
                                </label>
                                <input type="text" class="form-control"
                                       id="Title" name="Title" value="@Model?.Title" required maxlength="200" 
                                       placeholder="Enter task title...">
                                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "invalid-feedback" })
                                <div class="form-text">Maximum 200 characters</div>
                            </div>

                            <!-- Description -->
                            <div class="col-md-12 mb-3">
                                <label for="Description" class="form-label">Description</label>
                                <textarea class="form-control" 
                                          id="Description" name="Description" rows="4" maxlength="1000" 
                                          placeholder="Enter task description...">@Model?.Description</textarea>
                                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "invalid-feedback" })
                                <div class="form-text">Maximum 1000 characters</div>
                            </div>

                            
                            <div class="col-md-6 mb-3">
                                <label for="TaskPriority" class="form-label">
                                    Priority <span class="text-danger">*</span>
                                </label>
                                <select name="TaskPriority">
                                    <option value="InProgress">InProgress</option>
                                    <option value="Pending">Pending</option>
                                    <option value="Completed">Completed</option>
                                </select>

                                @Html.ValidationMessageFor(m => m.TaskPriority, "", new { @class = "invalid-feedback" })
                            </div>

                            <!-- Due Date -->
                            <div class="col-md-12 mb-4">
                                <label for="DueDate" class="form-label">
                                    Due Date <span class="text-danger">*</span>
                                </label>
                                <input type="datetime-local" class="form-control" 
                                       id="DueDate" name="DueDate" value="@(Model?.DueDate.ToString("yyyy-MM-ddTHH:mm"))" required>
                                @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <button type="button" class="btn btn-secondary" onclick="history.back()">
                                            <i class="fas fa-times me-2"></i>Cancel
                                        </button>
                                    </div>
                                    <div>
                                        <button type="button" class="btn btn-outline-primary me-2" id="resetFormBtn">
                                            <i class="fas fa-undo me-2"></i>Reset
                                        </button>
                                        <button type="submit" class="btn btn-primary" id="submitBtn">
                                            <span class="btn-text">
                                                <i class="fas fa-save me-2"></i>Create Task
                                            </span>
                                            <span class="btn-loading" style="display: none;">
                                                <span class="spinner-border spinner-border-sm me-2"></span>Creating...
                                            </span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Quick Tips -->
            @* <div class="card mt-4 border-info"> *@
            @*     <div class="card-header bg-light"> *@
            @*         <h6 class="mb-0 text-info"> *@
            @*             <i class="fas fa-lightbulb me-2"></i>Quick Tips *@
            @*         </h6> *@
            @*     </div> *@
            @*     <div class="card-body"> *@
            @*         <ul class="list-unstyled mb-0"> *@
            @*             <li class="mb-2"> *@
            @*                 <i class="fas fa-check text-success me-2"></i> *@
            @*                 Use descriptive titles to make tasks easy to identify *@
            @*             </li> *@
            @*             <li class="mb-2"> *@
            @*                 <i class="fas fa-check text-success me-2"></i> *@
            @*                 Set realistic due dates to manage expectations *@
            @*             </li> *@
            @*             <li class="mb-0"> *@
            @*                 <i class="fas fa-check text-success me-2"></i> *@
            @*                 Use priority levels to organize your workflow effectively *@
            @*             </li> *@
            @*         </ul> *@
            @*     </div> *@
            @* </div> *@
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Form submission
            $('#createTaskForm').on('submit', function(e) {
                e.preventDefault();
                
                const $submitBtn = $('#submitBtn');
                const $btnText = $submitBtn.find('.btn-text');
                const $btnLoading = $submitBtn.find('.btn-loading');
                
                // Show loading state
                $submitBtn.prop('disabled', true);
                $btnText.hide();
                $btnLoading.show();
                
                // Clear previous validation errors
                $('.is-invalid').removeClass('is-invalid');
                $('.invalid-feedback').text('');
                
                const formData = {
                    Title: $('#Title').val(),
                    Description: $('#Description').val(),
                    TaskStatus: $('#TaskStatus').val(),
                    TaskPriority: $('#TaskPriority').val(),
                    DueDate: $('#DueDate').val()
                };
                
                $.ajax({
                    url: '@Url.Action("Create", "Task")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Show success message
                            showAlert('success', 'Task created successfully!');
                            
                            // Redirect to dashboard after short delay
                            setTimeout(function() {
                                window.location.href = '@Url.Action("Dashboard", "Task")';
                            }, 1500);
                        } else {
                            handleValidationErrors(response.errors);
                            showAlert('danger', response.message || 'Error creating task');
                        }
                    },
                    error: function(xhr) {
                        console.error('Error creating task:', xhr);
                        showAlert('danger', 'An error occurred while creating the task');
                    },
                    complete: function() {
                        // Reset button state
                        $submitBtn.prop('disabled', false);
                        $btnText.show();
                        $btnLoading.hide();
                    }
                });
            });
            
            // Reset form
            $('#resetFormBtn').on('click', function() {
                $('#createTaskForm')[0].reset();
                $('.is-invalid').removeClass('is-invalid');
                $('.invalid-feedback').text('');
            });
            
            // Set minimum date to today
            const now = new Date();
            const minDateTime = now.toISOString().slice(0, 16);
            $('#DueDate').attr('min', minDateTime);
            
            // If no due date is set, default to tomorrow
            if (!$('#DueDate').val()) {
                const tomorrow = new Date(now);
                tomorrow.setDate(tomorrow.getDate() + 1);
                tomorrow.setHours(9, 0, 0, 0); // Set to 9 AM
                $('#DueDate').val(tomorrow.toISOString().slice(0, 16));
            }
        });
        
        function handleValidationErrors(errors) {
            if (errors && Array.isArray(errors)) {
                errors.forEach(function(error) {
                    const fieldName = error.split(' ')[0]; // Get field name from error message
                    const $field = $(`#${fieldName}`);
                    if ($field.length) {
                        $field.addClass('is-invalid');
                        $field.siblings('.invalid-feedback').text(error);
                    }
                });
            }
        }
        
        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Remove existing alerts
            $('.alert').remove();
            
            // Add new alert at the top of the card
            $('.card-body').prepend(alertHtml);
            
            // Auto-dismiss after 5 seconds
            setTimeout(function() {
                $('.alert').fadeOut();
            }, 5000);
        }
    </script>
}
