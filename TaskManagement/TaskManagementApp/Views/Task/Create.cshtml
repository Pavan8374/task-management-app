@using TaskManagement.Application.DTOs.Tasks
@model CreateTaskRequest
@{
    ViewData["Title"] = "Create New Task";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-8 offset-lg-2">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="fas fa-plus-circle me-2"></i>Create New Task
                    </h2>
                    <p class="text-muted mb-0">Fill in the details below to create a new task</p>
                </div>
                <a href="@Url.Action("Dashboard", "Task")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                </a>
            </div>

            <!-- Display Validation Summary -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Please correct the following errors:
                    @Html.ValidationSummary(false, "", new { @class = "mb-0 mt-2" })
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Display Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Create Task Form -->
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>Task Details
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Create", "Task", FormMethod.Post, new { @id = "createTaskForm", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <!-- Title -->
                            <div class="col-md-12 mb-3">
                                @Html.LabelFor(m => m.Title, "Task Title", new { @class = "form-label" })
                                <span class="text-danger">*</span>
                                @Html.TextBoxFor(m => m.Title, new
                                    {
                                        @class = "form-control" + (Html.ViewData.ModelState["Title"]?.Errors.Count > 0 ? " is-invalid" : ""),
                                        @placeholder = "Enter task title...",
                                        @maxlength = "200",
                                        @required = "required"
                                    })
                                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "invalid-feedback" })
                                <div class="form-text">Maximum 200 characters</div>
                            </div>

                            <!-- Description -->
                            <div class="col-md-12 mb-3">
                                @Html.LabelFor(m => m.Description, "Description", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.Description, new
                                    {
                                        @class = "form-control" + (Html.ViewData.ModelState["Description"]?.Errors.Count > 0 ? " is-invalid" : ""),
                                        @placeholder = "Enter task description...",
                                        @rows = "4",
                                        @maxlength = "1000"
                                    })
                                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "invalid-feedback" })
                                <div class="form-text">Maximum 1000 characters</div>
                            </div>

                            <!-- Priority -->
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(m => m.TaskPriority, "Priority", new { @class = "form-label" })
                                <span class="text-danger">*</span>
                                @Html.DropDownListFor(m => m.TaskPriority, new SelectList(new List<object> {
                            new { Value = "Low", Text = "Low" },
                            new { Value = "Medium", Text = "Medium" },
                            new { Value = "High", Text = "High" },
                            new { Value = "Critical", Text = "Critical" }
                            }, "Value", "Text", Model?.TaskPriority), new
                                                {
                                                    @class = "form-select" + (Html.ViewData.ModelState["TaskPriority"]?.Errors.Count > 0 ? " is-invalid" : ""),
                                                    @required = "required"
                                                })
                                @Html.ValidationMessageFor(m => m.TaskPriority, "", new { @class = "invalid-feedback" })
                            </div>

                            <!-- Due Date -->
                            <div class="col-md-12 mb-4">
                                @Html.LabelFor(m => m.DueDate, "Due Date", new { @class = "form-label" })
                                <span class="text-danger">*</span>
                                @Html.TextBoxFor(m => m.DueDate, "{0:yyyy-MM-ddTHH:mm}", new
                                    {
                                        @class = "form-control" + (Html.ViewData.ModelState["DueDate"]?.Errors.Count > 0 ? " is-invalid" : ""),
                                        @type = "datetime-local",
                                        @required = "required"
                                    })
                                @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <a href="@Url.Action("Dashboard", "Task")" class="btn btn-secondary">
                                            <i class="fas fa-times me-2"></i>Cancel
                                        </a>
                                    </div>
                                    <div>
                                        <button type="reset" class="btn btn-outline-primary me-2">
                                            <i class="fas fa-undo me-2"></i>Reset
                                        </button>
                                        <button type="submit" class="btn btn-primary" id="submitBtn">
                                            <i class="fas fa-save me-2"></i>Create Task
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set minimum date to today
            const now = new Date();
            const minDateTime = now.toISOString().slice(0, 16);
            $('#DueDate').attr('min', minDateTime);

            // If no due date is set, default to tomorrow at 9 AM
            if (!$('#DueDate').val()) {
                const tomorrow = new Date(now);
                tomorrow.setDate(tomorrow.getDate() + 1);
                tomorrow.setHours(9, 0, 0, 0);
                $('#DueDate').val(tomorrow.toISOString().slice(0, 16));
            }

            // Form submission with loading state
            $('#createTaskForm').on('submit', function() {
                const $submitBtn = $('#submitBtn');
                $submitBtn.prop('disabled', true);
                $submitBtn.html('<span class="spinner-border spinner-border-sm me-2"></span>Creating...');
            });

            // Auto-dismiss alerts after 5 seconds
            setTimeout(function() {
                $('.alert').fadeOut();
            }, 5000);
        });
    </script>
}