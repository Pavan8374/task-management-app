@model TaskManagement.Application.Tasks.TaskViewModel

@{
    ViewData["Title"] = "Task Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-4">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="fas fa-info-circle me-2"></i>Task Details
                </h4>
                <a href="@Url.Action("Dashboard", "Task")" class="btn btn-light btn-sm">
                    <i class="fas fa-arrow-left me-1"></i>Back to Dashboard
                </a>
            </div>
        </div>

        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-8">
                    <h3 class="text-primary">@Model.Title</h3>
                    <p class="text-muted">@Model.Description</p>
                </div>
                <div class="col-md-4 text-end">
                    <span class="badge @GetStatusBadgeClass(Model.TaskStatus)">@Model.TaskStatus</span>
                    <span class="badge @GetPriorityBadgeClass(Model.TaskPriority) ms-2">@Model.TaskPriority</span>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="detail-item">
                        <h5 class="text-muted">Due Date</h5>
                        <p><i class="far fa-calendar-alt me-2"></i>@Model.DueDate.ToString("MMMM dd, yyyy hh:mm tt")</p>
                    </div>

                    <div class="detail-item mt-3">
                        <h5 class="text-muted">Created On</h5>
                        <p><i class="far fa-clock me-2"></i>@Model.CreatedAt.ToString("MMMM dd, yyyy")</p>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="detail-item">
                        <h5 class="text-muted">Last Updated</h5>
                        <p><i class="fas fa-sync-alt me-2"></i>@Model.ModifiedAt?.ToString("MMMM dd, yyyy hh:mm tt")</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer bg-light">
            <div class="d-flex justify-content-between">
                <a href="@Url.Action("Update", "Task", new { id = Model.Id })" class="btn btn-warning">
                    <i class="fas fa-edit me-1"></i>Edit Task
                </a>
                <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                    <i class="fas fa-trash-alt me-1"></i>Delete Task
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this task?</p>
                <p class="fw-bold">@Model.Title</p>
                <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="Delete" method="post">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash-alt me-1"></i>Confirm Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Completed" => "bg-success",
            "In Progress" => "bg-info",
            "Pending" => "bg-warning",
            "On Hold" => "bg-secondary",
            _ => "bg-primary"
        };
    }

    string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            "High" => "bg-danger",
            "Medium" => "bg-warning",
            "Low" => "bg-success",
            "Critical" => "bg-dark",
            _ => "bg-primary"
        };
    }
}

@section Styles {
    <style>
        .detail-item {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .card {
            border-radius: 10px;
            border: none;
        }

        .card-header {
            border-radius: 10px 10px 0 0 !important;
        }
    </style>
}